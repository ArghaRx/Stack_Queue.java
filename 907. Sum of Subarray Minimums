https://leetcode.com/problems/sum-of-subarray-minimums/

import java.util.Stack;

class Solution {
    public int sumSubarrayMins(int[] arr) {
        int[] left = new int[arr.length]; // Corrected array declaration
        int[] right = new int[arr.length];
        Stack<int[]> sLeft = new Stack<>(); // Use Stack<int[]> for pairs
        Stack<int[]> sRight = new Stack<>();
        int mod = 1_000_000_007; // Assuming mod value

        for (int i = 0; i < arr.length; i++) {
            int count = 1;
            while (!sLeft.isEmpty() && sLeft.peek()[0] > arr[i]) {
                count += sLeft.peek()[1];
                sLeft.pop();
            }
            sLeft.push(new int[]{arr[i], count});
            left[i] = count;
        }

        for (int i = arr.length - 1; i >= 0; i--) {
            int count = 1;
            while (!sRight.isEmpty() && sRight.peek()[0] >= arr[i]) {
                count += sRight.peek()[1];
                sRight.pop();
            }
            sRight.push(new int[]{arr[i], count});
            right[i] = count;
        }

        long ans = 0;
        for (int i = 0; i < arr.length; i++) {
            ans = (ans + arr[i] * (long)left[i] * right[i]) % mod;
        }
        return (int) ans;
    }
}
