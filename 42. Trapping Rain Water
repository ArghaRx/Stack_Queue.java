** Hard **
https://leetcode.com/problems/trapping-rain-water/description/


__Brute__

class Solution {
    public int trap(int[] height) {
        int res = 0;
        for(int i = 0; i < height.length; i++)
        {
            int leftmax = 0, rightmax = 0;
            int j = i;
            while(j >= 0)
            {
                leftmax = Math.max(height[j], leftmax);
                j--;
            }
            j = i;
            while(j < height.length)
            {
                rightmax = Math.max(height[j], rightmax);
                j++;
            }
            res += Math.min(rightmax, leftmax) - height[i];
        }
        return res;
    }
}

__Optimal__

class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int left = 0, right = n - 1;
        int leftmax = 0, rightmax = 0;
        int res = 0;

        while(left <= right)
        {
            if(height[left] <= height[right])
            {
                if(height[left] >= leftmax) leftmax = height[left];
                else res += leftmax - height[left];  
                left++;
            }
            else
            {
                if(height[right] >= rightmax) rightmax = height[right];
                else res += rightmax - height[right];
                right--;
            }
        }
        return res;
    }
}
