https://leetcode.com/problems/next-greater-element-i/description/


******  BRUTE ******

class Solution {

    public int[] helper(int[] nums) {
        Stack<Integer> st = new Stack<>();
        int n = nums.length;
        int nge[] = new int[n];

        for(int i = n - 1; i >= 0; i--)
        {
            while(st.empty() == false && nums[i] > st.peek())
             st.pop();
            if(st.isEmpty()) 
            {
            nge[i] = -1;
            st.push(nums[i]);
            }
            else
            {
                nge[i] = st.peek();
                st.push(nums[i]);
            }
            
        }
        return nge;
    }

    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int duplicate[] = helper(nums2);
        // duplicate[] = helper(nums2);

        int ind = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < n2; i++)
         map.put(nums2[i], duplicate[ind++]);

        int ans[] = new int[n1];
        for(int i = 0; i < n1; i++)
        {
            ans[i] = map.get(nums1[i]);
        }
        return ans;
    }
}



******** Optimal **********


